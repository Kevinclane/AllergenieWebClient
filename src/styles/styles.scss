// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
@use "./_variables" as *;
@use "./presets" as *;
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$AllergenieWebClient-primary: mat.define-palette(mat.$indigo-palette);
$AllergenieWebClient-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);

// The warn palette is optional (defaults to red).
$AllergenieWebClient-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$AllergenieWebClient-theme: mat.define-light-theme((color: (primary: $AllergenieWebClient-primary,
                accent: $AllergenieWebClient-accent,
                warn: $AllergenieWebClient-warn,
            ),
            typography: mat.define-typography-config(),
            density: 0));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($AllergenieWebClient-theme);

.button-primary {
    @extend %button-primary;
}

.button-danger {
    @extend %button-danger;
}

button:disabled {
    @extend %button-disabled;
}

.pointer {
    cursor: pointer;
}

.move {
    cursor: move;
}

.error {
    color: $red;
}

.justify-start {
    @extend %justify-start;
}

.justify-center {
    @extend %justify-center;
}

.justify-end {
    @extend %justify-end;
}

.justify-between {
    @extend %justify-between;
}

.justify-around {
    @extend %justify-around;
}

//custom text input

input[type="text"],
textarea,
select {
    width: 100%;
    color: rgb(36, 35, 42);
    font-size: 1rem;
    line-height: 1.5rem;
    border-radius: 4px;
    padding: .25rem;
    border: 1px solid $dark-gray;
    background: $light-gray;
}

input[type="text"]:focus,
textarea:focus,
select:focus {
    outline: none;
    border: 2px solid black;
}

//End custom text input

//Begin slider

.switch {
    position: relative;
    display: inline-block;
    width: 3rem;
    height: 1.5rem;
}

.switch input {
    opacity: 0;
    width: 0;
    height: 0;
}

.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    -webkit-transition: .4s;
    transition: .4s;
}

.slider:before {
    position: absolute;
    content: "";
    height: 1rem;
    width: 1rem;
    left: .2rem;
    bottom: .25rem;
    background-color: white;
    -webkit-transition: .4s;
    transition: .4s;
}

input:checked+.slider {
    background-color: #2196F3;
}

input:focus+.slider {
    box-shadow: 0 0 1px #2196F3;
}

input:checked+.slider:before {
    -webkit-transform: translateX(1.6rem);
    -ms-transform: translateX(1.6rem);
    transform: translateX(1.6rem);
}

.slider.round {
    border-radius: 34px;
}

.slider.round:before {
    border-radius: 50%;
}

// End Slider

html,
body {
    min-height: 100%;
    margin: 0;
    font-family: ui-monospace, "Helvetica Neue", sans-serif;
    background-color: $dark;
    color: $light-gray;
}